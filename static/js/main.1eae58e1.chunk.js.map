{"version":3,"sources":["components/Buttons.js","App.js","serviceWorker.js","index.js"],"names":["Buttons","playAudio","audio","currentTime","play","handleClick","e","_this","props","activeState","target","children","display","id","setTimeout","_this2","this","document","addEventListener","indexOf","keyCode","querySelector","concat","String","fromCharCode","parentElement","_this3","btnStyle","minWidth","minHeight","border","color","background","fontSize","fontWeight","react_default","a","createElement","style","gridTemplateColumns","gridGap","btnsData","map","btn","key","className","sound","onClick","src","audioSrc","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","active","displaySound","bind","assertThisInitialized","toggleActive","setState","onStyle","borderRight","offStyle","components_Buttons","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1eae58e1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Buttons extends Component {\r\n  // play sounds function\r\n  playAudio = audio => {\r\n    // setting audio time to 0 for multiple fast clicks\r\n    audio.currentTime = 0;\r\n    // play audio\r\n    audio.play();\r\n  };\r\n  // onClick function\r\n  handleClick = e => {\r\n    // check if app is active or not\r\n    if (this.props.activeState) {\r\n      // get audio child element from clicked button\r\n      let audio = e.target.children[0];\r\n      // call play sound function\r\n      this.playAudio(audio);\r\n      // pass button id to display prop\r\n      this.props.display(e.target.id);\r\n      // remove display value after 2 sec. by sending empty string through display prop\r\n      setTimeout(() => {\r\n        this.props.display(\"\");\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    // add event listener for keyboard clicks\r\n    document.addEventListener(\"keydown\", e => {\r\n      // check if app is active or not\r\n      if (this.props.activeState) {\r\n        // add event listener only if the clicked button is within a set of buttons\r\n        if ([81, 87, 69, 65, 83, 68, 90, 88, 67].indexOf(e.keyCode) !== -1) {\r\n          //get audio with id equals to matching letter clicked on keyboard\r\n          let audio = document.querySelector(\r\n            `#${String.fromCharCode(e.keyCode)}`\r\n          );\r\n          this.playAudio(audio);\r\n          // get sound from button element which is a parent of audio element with id equals to matching letter clicked on keyboard\r\n          let display = document.querySelector(\r\n            `#${String.fromCharCode(e.keyCode)}`\r\n          ).parentElement.id;\r\n          // pass sound to display prop\r\n          this.props.display(display);\r\n          // remove display value after 2 sec. by sending empty string through display prop\r\n          setTimeout(() => {\r\n            this.props.display(\"\");\r\n          }, 2000);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const btnsContainer = {\r\n      display: \"grid\",\r\n      gridTemplateColumns: \"repeat(3 , 1fr)\",\r\n      gridGap: \"5px\"\r\n    };\r\n    const btnStyle = {\r\n      minWidth: \"4rem\",\r\n      minHeight: \"4rem\",\r\n      border: \"5px outset #5a6a6d\",\r\n      color: \"#d4d4d4\",\r\n      background: \"#3e565b\",\r\n      fontSize: \"1.5rem\",\r\n      fontWeight: \"700\"\r\n    };\r\n    return (\r\n      <div style={btnsContainer}>\r\n        {this.props.btnsData.map(btn => {\r\n          return (\r\n            <button\r\n              style={btnStyle}\r\n              key={btn.key}\r\n              className=\"drum-pad\"\r\n              id={btn.sound}\r\n              onClick={this.handleClick}\r\n            >\r\n              {btn.id}\r\n              <audio src={btn.audioSrc} className=\"clip\" id={btn.id} />\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nButtons.propTypes = {\r\n  btnsData: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Buttons;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport Buttons from \"./components/Buttons\";\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      display: \"\",\r\n      active: true,\r\n      btnsData: [\r\n        {\r\n          id: \"Q\",\r\n          key: 81,\r\n          sound: \"Heater-1\",\r\n          audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"\r\n        },\r\n        {\r\n          id: \"W\",\r\n          key: 87,\r\n          sound: \"Heater-2\",\r\n          audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"\r\n        },\r\n        {\r\n          id: \"E\",\r\n          audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\",\r\n          key: 69,\r\n          sound: \"Heater-3\"\r\n        },\r\n        {\r\n          id: \"A\",\r\n          key: 65,\r\n          sound: \"Shaker\",\r\n          audioSrc:\r\n            \"https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3\"\r\n        },\r\n        {\r\n          id: \"S\",\r\n          key: 83,\r\n          sound: \"Clap\",\r\n          audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"\r\n        },\r\n        {\r\n          id: \"D\",\r\n          key: 68,\r\n          sound: \"Open-HH\",\r\n          audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"\r\n        },\r\n        {\r\n          id: \"Z\",\r\n          key: 90,\r\n          sound: \"Kick-n'-Hat\",\r\n          audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"\r\n        },\r\n        {\r\n          id: \"X\",\r\n          key: 88,\r\n          sound: \"Kick\",\r\n          audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"\r\n        },\r\n        {\r\n          id: \"C\",\r\n          key: 67,\r\n          sound: \"Closed-HH\",\r\n          audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"\r\n        }\r\n      ]\r\n    };\r\n    this.displaySound = this.displaySound.bind(this);\r\n    this.toggleActive = this.toggleActive.bind(this);\r\n  }\r\n\r\n  displaySound(sound) {\r\n    this.setState({\r\n      display: sound\r\n    });\r\n  }\r\n\r\n  toggleActive() {\r\n    this.setState({\r\n      active: !this.state.active\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const onStyle = {\r\n      color: this.state.active ? \"#d4d4d4\" : \"#374c50\",\r\n      borderRight: \"2px solid #d4d4d4\"\r\n    };\r\n    const offStyle = {\r\n      color: this.state.active ? \"#374c50\" : \"#d4d4d4\"\r\n    };\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"drum-machine\">\r\n          <button onClick={this.toggleActive} className=\"toggleActive\">\r\n            <span style={onStyle}>on</span>\r\n            <span style={offStyle}>off</span>\r\n          </button>\r\n          <p id=\"display\">{this.state.display}</p>\r\n          <Buttons\r\n            btnsData={this.state.btnsData}\r\n            display={this.displaySound}\r\n            activeState={this.state.active}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}